{"version":3,"file":"reflowable-injectable-script.js","mappings":"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","sources":["webpack://readium-js/./src/index-reflowable-injectable.ts","webpack://readium-js/./src/bridge/all-listener-bridge.ts","webpack://readium-js/./src/common/gestures.ts","webpack://readium-js/./src/bridge/reflowable-css-bridge.ts","webpack://readium-js/./src/util/columns.ts"],"sourcesContent":["//\n//  Copyright 2024 Readium Foundation. All rights reserved.\n//  Use of this source code is governed by the BSD-style license\n//  available in the top-level LICENSE file of the project.\n//\n/**\n * Script loaded by reflowable resources.\n */\nimport { ReflowableListenerAdapter, } from \"./bridge/all-listener-bridge\";\nimport { CssBridge } from \"./bridge/reflowable-css-bridge\";\nimport { GesturesDetector } from \"./common/gestures\";\nimport { appendVirtualColumnIfNeeded } from \"./util/columns\";\nconst bridgeListener = new ReflowableListenerAdapter(window.gestures);\nnew GesturesDetector(window, bridgeListener);\nWindow.prototype.readiumcss = new CssBridge(window.document);\nwindow.documentState.onScriptsLoaded();\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nwindow.addEventListener(\"load\", (event) => {\n    let documentLoadedFired = false;\n    const observer = new ResizeObserver(() => {\n        requestAnimationFrame(() => {\n            if (appendVirtualColumnIfNeeded(window)) {\n                // Column has been added or removed, wait for next resize callback.\n                return;\n            }\n            if (!documentLoadedFired) {\n                const scrollingElement = window.document.scrollingElement;\n                if (scrollingElement != null &&\n                    scrollingElement.scrollHeight == 0 &&\n                    scrollingElement.scrollWidth == 0) {\n                    // Document is not sized yet\n                    return;\n                }\n                window.documentState.onDocumentLoadedAndSized();\n                documentLoadedFired = true;\n            }\n            else {\n                window.documentState.onDocumentResized();\n            }\n        });\n    });\n    observer.observe(document.body);\n});\n","export class ReflowableListenerAdapter {\n    constructor(gesturesBridge) {\n        this.gesturesBridge = gesturesBridge;\n    }\n    onTap(event) {\n        const tapEvent = {\n            x: (event.clientX - visualViewport.offsetLeft) * visualViewport.scale,\n            y: (event.clientY - visualViewport.offsetTop) * visualViewport.scale,\n        };\n        const stringEvent = JSON.stringify(tapEvent);\n        this.gesturesBridge.onTap(stringEvent);\n    }\n    onLinkActivated(href, outerHtml) {\n        this.gesturesBridge.onLinkActivated(href, outerHtml);\n    }\n}\nexport class FixedListenerAdapter {\n    constructor(window, gesturesApi, documentApi) {\n        this.window = window;\n        this.gesturesApi = gesturesApi;\n        this.documentApi = documentApi;\n        this.resizeObserverAdded = false;\n        this.documentLoadedFired = false;\n    }\n    onTap(event) {\n        this.gesturesApi.onTap(JSON.stringify(event));\n    }\n    onLinkActivated(href, outerHtml) {\n        this.gesturesApi.onLinkActivated(href, outerHtml);\n    }\n    onLayout() {\n        if (!this.resizeObserverAdded) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const observer = new ResizeObserver(() => {\n                requestAnimationFrame(() => {\n                    const scrollingElement = this.window.document.scrollingElement;\n                    if (!this.documentLoadedFired &&\n                        (scrollingElement == null ||\n                            scrollingElement.scrollHeight > 0 ||\n                            scrollingElement.scrollWidth > 0)) {\n                        this.documentApi.onDocumentLoadedAndSized();\n                        this.documentLoadedFired = true;\n                    }\n                    else {\n                        this.documentApi.onDocumentResized();\n                    }\n                });\n            });\n            observer.observe(this.window.document.body);\n        }\n        this.resizeObserverAdded = true;\n    }\n}\n","export class GesturesDetector {\n    constructor(window, listener) {\n        this.window = window;\n        this.listener = listener;\n        document.addEventListener(\"click\", (event) => {\n            this.onClick(event);\n        }, false);\n    }\n    onClick(event) {\n        if (event.defaultPrevented) {\n            return;\n        }\n        const selection = this.window.getSelection();\n        if (selection && selection.type == \"Range\") {\n            // There's an on-going selection, the tap will dismiss it so we don't forward it.\n            // selection.type might be None (collapsed) or Caret with a collapsed range\n            // when there is not true selection.\n            return;\n        }\n        let nearestElement;\n        if (event.target instanceof HTMLElement) {\n            nearestElement = this.nearestInteractiveElement(event.target);\n        }\n        else {\n            nearestElement = null;\n        }\n        if (nearestElement) {\n            if (nearestElement instanceof HTMLAnchorElement) {\n                this.listener.onLinkActivated(nearestElement.href, nearestElement.outerHTML);\n            }\n        }\n        else {\n            this.listener.onTap(event);\n        }\n        event.stopPropagation();\n        event.preventDefault();\n    }\n    // See. https://github.com/JayPanoz/architecture/tree/touch-handling/misc/touch-handling\n    nearestInteractiveElement(element) {\n        if (element == null) {\n            return null;\n        }\n        const interactiveTags = [\n            \"a\",\n            \"audio\",\n            \"button\",\n            \"canvas\",\n            \"details\",\n            \"input\",\n            \"label\",\n            \"option\",\n            \"select\",\n            \"submit\",\n            \"textarea\",\n            \"video\",\n        ];\n        if (interactiveTags.indexOf(element.nodeName.toLowerCase()) != -1) {\n            return element;\n        }\n        // Checks whether the element is editable by the user.\n        if (element.hasAttribute(\"contenteditable\") &&\n            element.getAttribute(\"contenteditable\").toLowerCase() != \"false\") {\n            return element;\n        }\n        // Checks parents recursively because the touch might be for example on an <em> inside a <a>.\n        if (element.parentElement) {\n            return this.nearestInteractiveElement(element.parentElement);\n        }\n        return null;\n    }\n}\n","export class CssBridge {\n    constructor(document) {\n        this.document = document;\n    }\n    setProperties(properties) {\n        for (const [key, value] of properties) {\n            this.setProperty(key, value);\n        }\n    }\n    // For setting user setting.\n    setProperty(key, value) {\n        if (value === null || value === \"\") {\n            this.removeProperty(key);\n        }\n        else {\n            const root = document.documentElement;\n            // The `!important` annotation is added with `setProperty()` because if it's part of the\n            // `value`, it will be ignored by the Web View.\n            root.style.setProperty(key, value, \"important\");\n        }\n    }\n    // For removing user setting.\n    removeProperty(key) {\n        const root = document.documentElement;\n        root.style.removeProperty(key);\n    }\n}\n","/**\n * In paginated mode, the width of each resource must be a multiple of the viewport size\n * for proper snapping.  This may not be automatically the case if the number of\n * columns in the resource is not a multiple of the number of columns fitting in the viewport.\n * To fix this, we insert a blank virtual column at the end of the resource.\n *\n * Returns if a virtual column has been added or removed.\n */\nexport function appendVirtualColumnIfNeeded(wnd) {\n    // FIXME: what about scroll mode?\n    const id = \"readium-virtual-page\";\n    let virtualCol = wnd.document.getElementById(id);\n    if (getColumnCountPerScreen(wnd) !== 2) {\n        if (virtualCol) {\n            virtualCol.remove();\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        const documentWidth = wnd.document.scrollingElement.scrollWidth;\n        const colCount = documentWidth / wnd.innerWidth;\n        const hasOddColCount = (Math.round(colCount * 2) / 2) % 1 > 0.1;\n        if (hasOddColCount) {\n            if (virtualCol) {\n                virtualCol.remove();\n            }\n            else {\n                virtualCol = wnd.document.createElement(\"div\");\n                virtualCol.setAttribute(\"id\", id);\n                virtualCol.dataset.readium = \"true\";\n                virtualCol.style.breakBefore = \"column\";\n                virtualCol.innerHTML = \"&#8203;\"; // zero-width space\n                wnd.document.body.appendChild(virtualCol);\n            }\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}\nfunction getColumnCountPerScreen(wnd) {\n    return parseInt(wnd\n        .getComputedStyle(wnd.document.documentElement)\n        .getPropertyValue(\"column-count\"));\n}\n"],"names":["bridgeListener","constructor","gesturesBridge","this","onTap","event","tapEvent","x","clientX","visualViewport","offsetLeft","scale","y","clientY","offsetTop","stringEvent","JSON","stringify","onLinkActivated","href","outerHtml","window","gestures","listener","document","addEventListener","onClick","defaultPrevented","selection","getSelection","type","nearestElement","target","HTMLElement","nearestInteractiveElement","HTMLAnchorElement","outerHTML","stopPropagation","preventDefault","element","indexOf","nodeName","toLowerCase","hasAttribute","getAttribute","parentElement","Window","prototype","readiumcss","setProperties","properties","key","value","setProperty","removeProperty","documentElement","style","documentState","onScriptsLoaded","documentLoadedFired","ResizeObserver","requestAnimationFrame","wnd","id","virtualCol","getElementById","parseInt","getComputedStyle","getPropertyValue","getColumnCountPerScreen","remove","colCount","scrollingElement","scrollWidth","innerWidth","Math","round","createElement","setAttribute","dataset","readium","breakBefore","innerHTML","body","appendChild","appendVirtualColumnIfNeeded","onDocumentResized","scrollHeight","onDocumentLoadedAndSized","observe"],"sourceRoot":""}