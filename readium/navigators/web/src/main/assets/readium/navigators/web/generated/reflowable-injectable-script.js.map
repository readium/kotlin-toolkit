{"version":3,"file":"reflowable-injectable-script.js","mappings":"yBAWA,MAAMA,EAAiB,ICXhB,MACH,WAAAC,CAAYC,GACRC,KAAKC,UAAYF,CACrB,CACA,KAAAG,CAAMC,GACFH,KAAKC,UAAUC,MAAME,KAAKC,UAAUF,GACxC,CACA,eAAAG,CAAgBC,EAAMC,GAClBR,KAAKC,UAAUK,gBAAgBC,EAAMC,EACzC,GDE6CC,OAAOC,UAClDC,EAAmB,CACrBT,MAAQC,IACJ,MAAMS,EAAW,CACbC,EAAGV,EAAMW,QAAUC,eAAeC,MAClCC,EAAGd,EAAMe,QAAUH,eAAeC,OAEtCnB,EAAeK,MAAMU,EAAS,EAElCN,gBAAiB,CAACC,EAAMC,KACpBX,EAAeS,gBAAgBC,EAAMC,EAAU,GAGvD,IExBO,MACH,WAAAV,CAAYW,EAAQU,GAChBnB,KAAKS,OAASA,EACdT,KAAKmB,SAAWA,EAChBC,SAASC,iBAAiB,SAAUlB,IAChCH,KAAKsB,QAAQnB,EAAM,IACpB,EACP,CACA,OAAAmB,CAAQnB,GACJ,GAAIA,EAAMoB,iBACN,OAEJ,MAAMC,EAAYxB,KAAKS,OAAOgB,eAC9B,GAAID,GAA+B,SAAlBA,EAAUE,KAIvB,OAEJ,IAAIC,EAEAA,EADAxB,EAAMyB,kBAAkBC,YACP7B,KAAK8B,0BAA0B3B,EAAMyB,QAGrC,KAEjBD,EACIA,aAA0BI,mBAC1B/B,KAAKmB,SAASb,gBAAgBqB,EAAepB,KAAMoB,EAAeK,WAItEhC,KAAKmB,SAASjB,MAAMC,GAExBA,EAAM8B,kBACN9B,EAAM+B,gBACV,CAEA,yBAAAJ,CAA0BK,GACtB,OAAe,MAAXA,EACO,MAgBqD,GAdxC,CACpB,IACA,QACA,SACA,SACA,UACA,QACA,QACA,SACA,SACA,SACA,WACA,SAEgBC,QAAQD,EAAQE,SAASC,gBAIzCH,EAAQI,aAAa,oBACoC,SAAzDJ,EAAQK,aAAa,mBAAmBF,cAJjCH,EAQPA,EAAQM,cACDzC,KAAK8B,0BAA0BK,EAAQM,eAE3C,IACX,GF7CiBhC,OAAQE,GAC7B+B,OAAOC,UAAUC,WAAa,IGzBvB,MACH,WAAA9C,CAAYsB,GACRpB,KAAKoB,SAAWA,CACpB,CACA,aAAAyB,CAAcC,GACV,IAAK,MAAOC,EAAKC,KAAUF,EACvB9C,KAAKiD,YAAYF,EAAKC,EAE9B,CAEA,WAAAC,CAAYF,EAAKC,GACC,OAAVA,GAA4B,KAAVA,EAClBhD,KAAKkD,eAAeH,GAGP3B,SAAS+B,gBAGjBC,MAAMH,YAAYF,EAAKC,EAAO,YAE3C,CAEA,cAAAE,CAAeH,GACE3B,SAAS+B,gBACjBC,MAAMF,eAAeH,EAC9B,GHAwCtC,OAAOW,UACnDX,OAAO4C,eAAeC,kBAEtB7C,OAAOY,iBAAiB,QAASlB,IAC7BM,OAAO4C,eAAeE,kBAAkB,G","sources":["webpack://readium-js/./src/index-reflowable-injectable.ts","webpack://readium-js/./src/bridge/all-gestures-bridge.ts","webpack://readium-js/./src/common/gestures.ts","webpack://readium-js/./src/bridge/reflowable-css-bridge.ts"],"sourcesContent":["//\n//  Copyright 2024 Readium Foundation. All rights reserved.\n//  Use of this source code is governed by the BSD-style license\n//  available in the top-level LICENSE file of the project.\n//\n/**\n * Script loaded by reflowable resources.\n */\nimport { BridgeGesturesAdapter, } from \"./bridge/all-gestures-bridge\";\nimport { CssBridge } from \"./bridge/reflowable-css-bridge\";\nimport { GesturesDetector } from \"./common/gestures\";\nconst bridgeListener = new BridgeGesturesAdapter(window.gestures);\nconst gesturesListener = {\n    onTap: (event) => {\n        const tapEvent = {\n            x: event.clientX * visualViewport.scale,\n            y: event.clientY * visualViewport.scale,\n        };\n        bridgeListener.onTap(tapEvent);\n    },\n    onLinkActivated: (href, outerHtml) => {\n        bridgeListener.onLinkActivated(href, outerHtml);\n    },\n};\nnew GesturesDetector(window, gesturesListener);\nWindow.prototype.readiumcss = new CssBridge(window.document);\nwindow.initialization.onScriptsLoaded();\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nwindow.addEventListener(\"load\", (event) => {\n    window.initialization.onDocumentLoaded();\n});\n","export class BridgeGesturesAdapter {\n    constructor(gesturesApi) {\n        this.nativeApi = gesturesApi;\n    }\n    onTap(event) {\n        this.nativeApi.onTap(JSON.stringify(event));\n    }\n    onLinkActivated(href, outerHtml) {\n        this.nativeApi.onLinkActivated(href, outerHtml);\n    }\n}\n","export class GesturesDetector {\n    constructor(window, listener) {\n        this.window = window;\n        this.listener = listener;\n        document.addEventListener(\"click\", (event) => {\n            this.onClick(event);\n        }, false);\n    }\n    onClick(event) {\n        if (event.defaultPrevented) {\n            return;\n        }\n        const selection = this.window.getSelection();\n        if (selection && selection.type == \"Range\") {\n            // There's an on-going selection, the tap will dismiss it so we don't forward it.\n            // selection.type might be None (collapsed) or Caret with a collapsed range\n            // when there is not true selection.\n            return;\n        }\n        let nearestElement;\n        if (event.target instanceof HTMLElement) {\n            nearestElement = this.nearestInteractiveElement(event.target);\n        }\n        else {\n            nearestElement = null;\n        }\n        if (nearestElement) {\n            if (nearestElement instanceof HTMLAnchorElement) {\n                this.listener.onLinkActivated(nearestElement.href, nearestElement.outerHTML);\n            }\n        }\n        else {\n            this.listener.onTap(event);\n        }\n        event.stopPropagation();\n        event.preventDefault();\n    }\n    // See. https://github.com/JayPanoz/architecture/tree/touch-handling/misc/touch-handling\n    nearestInteractiveElement(element) {\n        if (element == null) {\n            return null;\n        }\n        const interactiveTags = [\n            \"a\",\n            \"audio\",\n            \"button\",\n            \"canvas\",\n            \"details\",\n            \"input\",\n            \"label\",\n            \"option\",\n            \"select\",\n            \"submit\",\n            \"textarea\",\n            \"video\",\n        ];\n        if (interactiveTags.indexOf(element.nodeName.toLowerCase()) != -1) {\n            return element;\n        }\n        // Checks whether the element is editable by the user.\n        if (element.hasAttribute(\"contenteditable\") &&\n            element.getAttribute(\"contenteditable\").toLowerCase() != \"false\") {\n            return element;\n        }\n        // Checks parents recursively because the touch might be for example on an <em> inside a <a>.\n        if (element.parentElement) {\n            return this.nearestInteractiveElement(element.parentElement);\n        }\n        return null;\n    }\n}\n","export class CssBridge {\n    constructor(document) {\n        this.document = document;\n    }\n    setProperties(properties) {\n        for (const [key, value] of properties) {\n            this.setProperty(key, value);\n        }\n    }\n    // For setting user setting.\n    setProperty(key, value) {\n        if (value === null || value === \"\") {\n            this.removeProperty(key);\n        }\n        else {\n            const root = document.documentElement;\n            // The `!important` annotation is added with `setProperty()` because if it's part of the\n            // `value`, it will be ignored by the Web View.\n            root.style.setProperty(key, value, \"important\");\n        }\n    }\n    // For removing user setting.\n    removeProperty(key) {\n        const root = document.documentElement;\n        root.style.removeProperty(key);\n    }\n}\n"],"names":["bridgeListener","constructor","gesturesApi","this","nativeApi","onTap","event","JSON","stringify","onLinkActivated","href","outerHtml","window","gestures","gesturesListener","tapEvent","x","clientX","visualViewport","scale","y","clientY","listener","document","addEventListener","onClick","defaultPrevented","selection","getSelection","type","nearestElement","target","HTMLElement","nearestInteractiveElement","HTMLAnchorElement","outerHTML","stopPropagation","preventDefault","element","indexOf","nodeName","toLowerCase","hasAttribute","getAttribute","parentElement","Window","prototype","readiumcss","setProperties","properties","key","value","setProperty","removeProperty","documentElement","style","initialization","onScriptsLoaded","onDocumentLoaded"],"sourceRoot":""}